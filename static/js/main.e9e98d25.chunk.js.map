{"version":3,"sources":["components/Header/Header.js","components/Form/Form.js","components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["Header","Form","props","type","id","name","className","placeholder","onChange","handleSearch","value","onClick","handleSubmit","Card","style","backgroundImage","avatar","login","href","target","repos","followers","following","App","useState","setName","userName","setUserName","setFollowers","setFollowing","setRepos","setAvatar","userInput","setUserInput","error","setError","useEffect","fetch","then","res","json","data","setData","public_repos","avatar_url","e","message","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"kTAWeA,MARf,WACI,OACI,gCACI,2C,MCMGC,MATf,SAAcC,GACV,OACI,8BACI,2BAAOC,KAAK,OAAOC,GAAG,YAAYC,KAAK,YAAYC,UAAU,QAAQC,YAAY,uBAAoBC,SAAUN,EAAMO,eACrH,2BAAON,KAAK,SAASO,MAAM,SAASJ,UAAU,SAASK,QAAST,EAAMU,iB,MCWnEC,MAff,SAAcX,GACV,OACI,yBAAKI,UAAU,QACX,yBAAKA,UAAU,cAAcQ,MAAO,CAACC,gBAAgB,OAAD,OAASb,EAAMc,OAAf,QACpD,yBAAKV,UAAU,QACX,wBAAIA,UAAU,YAAYJ,EAAMe,OAChC,uBAAGC,KAAI,6BAAwBhB,EAAMe,OAASE,OAAO,SAASb,UAAU,gBAAxE,eAEJ,gDAAmBJ,EAAMkB,OACzB,2CAAiBlB,EAAMmB,WACvB,uBAAGf,UAAU,UAAb,cAAkCJ,EAAMoB,aCuErCC,MA1Ef,WAAgB,IAAD,EACUC,mBAAS,IADnB,mBACNnB,EADM,KACDoB,EADC,OAEkBD,mBAAS,IAF3B,mBAENE,EAFM,KAEGC,EAFH,OAGoBH,mBAAS,IAH7B,mBAGNH,EAHM,KAGIO,EAHJ,OAIoBJ,mBAAS,IAJ7B,mBAINF,EAJM,KAIIO,EAJJ,OAKYL,mBAAS,IALrB,mBAKNJ,EALM,KAKAU,EALA,OAMcN,mBAAS,IANvB,mBAMNR,EANM,KAMCe,EAND,OAOoBP,mBAAS,IAP7B,mBAONQ,EAPM,KAOIC,EAPJ,OAQYT,mBAAS,MARrB,mBAQNU,EARM,KAQAC,EARA,KAUbC,qBAAU,WACRC,MAAM,wCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJC,EAAQD,QAEZ,IAEF,IAAMC,EAAU,SAAC,GAOV,IANLrC,EAMI,EANJA,KACAY,EAKI,EALJA,MACAI,EAII,EAJJA,UACAC,EAGI,EAHJA,UACAqB,EAEI,EAFJA,aACAC,EACI,EADJA,WAEAnB,EAAQpB,GACRsB,EAAYV,GACZW,EAAaP,GACbQ,EAAaP,GACbQ,EAASa,GACTZ,EAAUa,IAqBZ,OACE,yBAAKtC,UAAU,OACb,yBAAKA,UAAU,WACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEG,aAvBe,SAACoC,GACpBZ,EAAaY,EAAE1B,OAAOT,QAuBlBE,aApBe,WACnByB,MAAM,gCAAD,OAAiCL,IACnCM,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACAA,EAAKK,SACPX,EAAS,qBACTY,QAAQC,IAAIP,EAAKK,WAEjBJ,EAAQD,GACRN,EAAS,aAaXD,EAAS,wBAAI5B,UAAU,SAAS4B,GAC1B,kBAAC,EAAD,CACA7B,KAAQA,EACRY,MAASS,EACTL,UAAaA,EACbC,UAAaA,EACbF,MAASA,EACTJ,OAAUA,MCjEJiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAA7B,GACLa,QAAQb,MAAMA,EAAMY,c","file":"static/js/main.e9e98d25.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\"\r\n\r\nfunction Header() {\r\n    return(\r\n        <header>\r\n            <h1>GitSearch</h1>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./Form.css\"\r\n\r\nfunction Form(props) {\r\n    return(\r\n        <form>\r\n            <input type=\"text\" id=\"fusername\" name=\"fusername\" className=\"input\" placeholder=\"usuário do github\" onChange={props.handleSearch}/>\r\n            <input type=\"button\" value=\"Buscar\" className=\"button\" onClick={props.handleSubmit}/>\r\n        </form> \r\n    );\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./Card.css\"\r\n\r\nfunction Card(props) {\r\n    return(\r\n        <div className=\"card\">\r\n            <div className=\"profile-img\" style={{backgroundImage: `url(${props.avatar})`}}></div>\r\n            <div className=\"flex\">\r\n                <h2 className=\"username\">{props.login}</h2>\r\n                <a href={`https://github.com/${props.login}`} target=\"_blank\" className=\"profile-link\">Ver perfil</a>\r\n            </div>\r\n            <p>repositórios - {props.repos}</p>\r\n            <p>seguidores - {props.followers}</p>\r\n            <p className=\"last-p\">seguindo - {props.following}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ReactDOM from \"react-dom\";\n\n/* Components */\nimport Header from \"./components/Header/Header\";\nimport Form from \"./components/Form/Form\";\nimport Card from \"./components/Card/Card\";\n\n\nfunction App() {\n  const [name,setName] = useState('');\n  const [userName,setUserName] = useState('');\n  const [followers,setFollowers] = useState('');\n  const [following,setFollowing] = useState('');\n  const [repos,setRepos] = useState('');\n  const [avatar,setAvatar] = useState('');\n  const [userInput,setUserInput] = useState('');\n  const [error,setError] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://api.github.com/users/example\")\n      .then(res => res.json())\n      .then(data =>{\n        setData(data)\n      })\n  },[]);  \n\n  const setData = ({ \n    name, \n    login, \n    followers, \n    following, \n    public_repos, \n    avatar_url\n  }) => {\n    setName(name);\n    setUserName(login);\n    setFollowers(followers);\n    setFollowing(following);\n    setRepos(public_repos);\n    setAvatar(avatar_url);\n  }\n\n  const handleSearch = (e) => {\n    setUserInput(e.target.value)\n  }\n\n  const handleSubmit = () => {\n    fetch(`https://api.github.com/users/${userInput}`)\n      .then(res => res.json())\n      .then(data => {\n        if (data.message) {\n          setError(\"Não encontrado\")\n          console.log(data.message)\n        } else {\n          setData(data);\n          setError(null)\n        }\n      })\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"cursor\"></div>\n      <Header />\n      <Form \n        handleSearch={handleSearch}\n        handleSubmit={handleSubmit}\n      />\n      { error ? (<h1 className=\"error\">{error}</h1>) : (\n              <Card\n              name = {name}\n              login = {userName}\n              followers = {followers}\n              following = {following}\n              repos = {repos}\n              avatar = {avatar}\n            />\n       ) }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}